<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	 xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans  
                        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd  
                        http://www.springframework.org/schema/context  
                        http://www.springframework.org/schema/context/spring-context-4.0.xsd  
                        http://www.springframework.org/schema/mvc  
                        http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
                        http://www.springframework.org/schema/tx
       					 http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
                        ">
  
  
	
	<!-- 引入配置文件 -->
	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location" value="classpath:jdbc.properties" />
	</bean>
 
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="driverClass" value="${jdbc.driverClassName}" />
		<property name="jdbcUrl" value="${jdbc.url}" />
		<property name="user" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<property name="autoCommitOnClose" value="true"/>
		<property name="checkoutTimeout" value="${cpool.checkoutTimeout}"/>
		<property name="initialPoolSize" value="${cpool.minPoolSize}"/>
		<property name="minPoolSize" value="${cpool.minPoolSize}"/>
		<property name="maxPoolSize" value="${cpool.maxPoolSize}"/>
		<property name="maxIdleTime" value="${cpool.maxIdleTime}"/>
		<property name="acquireIncrement" value="${cpool.acquireIncrement}"/>
		<property name="maxIdleTimeExcessConnections" value="${cpool.maxIdleTimeExcessConnections}"/>
	</bean>
	
 
	
   <bean id="nativeJdbcExtractor" class="org.springframework.jdbc.support.nativejdbc.C3P0NativeJdbcExtractor"  
    lazy-init="true" />
	
	<bean id="lobHandler" class="org.springframework.jdbc.support.lob.OracleLobHandler" lazy-init="true">  
    <property name="nativeJdbcExtractor">  
        <ref bean="nativeJdbcExtractor" />  
    </property>  
  </bean>
	<!--<bean id="lobHandler" class="org.springframework.jdbc.support.lob.DefaultLobHandler" lazy-init="true"/>
	<bean id="sqlMapClient" class="org.springframework.orm.ibatis.SqlMapClientFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<property name="lobHandler" ref="lobHandler"></property>
		<property name="configLocation" value="classpath:sqlMapConfig.xml"></property>
		<property name="mappingLocations">
			<list>
		 	<value>classpath:/com/*/*/xml/*_ibatis.xml</value>  
			  <value>classpath:/com/module/allbaiduGis/xml/allbaiduGis_ibatis.xml</value>
  			</list>
		</property>                                                                                                   
	 </bean>    -->    
	 	<!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
 		<!-- 自动扫描mapping.xml文件 
		<property name="mapperLocations" value="classpath:com/module/*/*/*Mapper.xml"></property>
		<property name="mapperLocations" value="classpath:com/**/*Mapper.xml"></property>-->
		<property name="configLocation" value="classpath:mybatis-config.xml"></property>  
		<!-- <property name="mapperLocations" value="classpath:com/mybatis/mapping/mybatixXML/*.xml"></property> -->
		<property name="mapperLocations">
          <array>
              <value>classpath:com/mybatis/mapping/mybatixXML/*.xml</value>
              <value>classpath:com/*/*/*/*/*mybatis.xml</value>
              <value>classpath:com/*/*/*/*/*/*mybatis.xml</value>
          </array>
      </property>
		
		
	</bean>
	
	 <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg index="0" ref="sqlSessionFactory"/>
    </bean>
	 
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- DAO接口所在包名，Spring会自动查找其下的类 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.mybatis.mapping.dao" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
	</bean>
	<!-- 使用annotation定义事务 -->
	<!-- 基于注释的事务，当注释中发现@Transactional时，使用id为“transactionManager”的事务管理器  -->
    <!-- 如果没有设置transaction-manager的值，则spring以缺省默认的事务管理器来处理事务，默认事务管理器为第一个加载的事务管理器 -->
	  <tx:annotation-driven transaction-manager="transactionManager" /> 
	
	<import resource="classpath:spring-report.xml"/>
	

</beans>